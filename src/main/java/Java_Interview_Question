
海量数据处理
https://github.com/nonstriater/Learn-Algorithms/blob/master/%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98%E9%80%89%E7%BC%96/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.md

给定40亿个数字和另外的几个数字，如何判断后面的数字在前面40亿个数字中出现过？
way1. 把40亿个数字放在HashMap里面去，然后containsKey，判断即可。但是这样的话，可能出现内存不够的
情况，所以可以考虑way2，位图法

way2. 找出40个数字和另外的几个数字的最大数字，然后将这些数字作为数组的下标，然后统计出出现的次数，
最后把另外的几个数字和进行判断，如果数组的值发生了变化，则说明有出现过。问题是，数组这么大，内存能
装下吗？

字符串第一次只出现一个的字符？如何优化算法使得遍历次数最少？
方法一：HashMap
方法二[BitMap]：首先把字符串转换成一个一个的字符，再把字符转成ascii数组的下标进行统计，时间复杂度O(n)


有一个数组，只利用堆，如何倒序？
方法一：数组a[i]的优先级是i,把数组的值和优先级存储到堆里面去，按照优先级的大小进行大顶堆输出就好
方法二：把数组的地址存储到堆中，然后大顶堆，这样也可以

What is the difference between final, finally and finalize() in Java?

finalize() - method belongs to Object class. The method that is invoked
while doing the garbage collection of the object. 另外，所有Override finalize
的对象都会有一个FinalReference的引用，这样的对象在new的时候会进入一个Queue里面，再释放
资源的时候会从Queue里面一个一个的拿出来，一般的像这样的对象这样做并没有什么太大的问题，但是
FIS这样的对象在close之后，本不应该这样做了，如果这样做，那么就是GC在工作，导致STW(Stop
the world),但是具体导致什么问题，还得看你的垃圾收集器具体的类型。G1的话，是STW的问题，如果
是并发垃圾收集器，可能没有，所以一般的服务器都是都种多种垃圾收集器并存。

finally() - 不管try里面发生了什么事情，比如System.exit(0),都会执行finally里面的动作，比
如释放锁，释放数据库的连接，关闭流。
finally {
      this.readLock.unlock();
    }

What is the difference between equals() and == ?

== operator is used to compare the references of the objects. 也就是比较２个对象的地址
equals 比较２个对象是否相等


一个楼梯有20级，每次走1级或2级，请问从底走到顶一共有多少种走法？
Ans: 考虑下楼，第一次下一楼后有f(n-1)种走法，或者第一次下２楼有f(n-2)种走法，这样
f(n) = f(n-1) + f(n-2)

一个人上台阶可以一次上1个，2个，或者3个，问这个人上n层的台阶，总共有几种走法？
Ans: 思路同样，第一次上一个台阶后还剩下f(n-1)种走法，第一次上2个台阶后还剩下f(n-2)种走法，
第一次上三个台阶还剩下f(n-3)种走法。所以:　f(n) = f(n-1) + f(n-2) + f(n-3)

如何求解3^n次方？二分思路
3^n = 3^(n/2)*3^(n/2) if (n%2==0),这样只要算一次就可以了

谈谈你对分布式缓存的理解mem-cached ?

类加载过程?
深入探讨 Java 类加载器
https://www.ibm.com/developerworks/cn/java/j-lo-classloader/
加载（Loading）
1. 通过类名去获取此类的二进制字节流
【怎么获取这个Class类，并没有说一定要从哪里去获取，
可以从网络(比如一个输入或者输出流；也可以从数据库反序列化出来;也可以从Class.forName中反射出来)】
2. 将这个字节流代表的静态存储结构变成方法区运行时候的数据结构
3. 在内存中生成一个代表这个类的 java.lang.Class对象，供以后去使用

验证（Verification）
Main idea: 确保当前的Class文件的结构符合虚拟机的要求，确保不会把虚拟机给弄坏。

准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)和

卸载(Unloading): 也就是垃圾回收掉了。

Java的动态代理-->Spring AOP :http://www.iteye.com/topic/1123293
在代理模式中，我们创建具有现有对象的对象【代理对象】，以便向外界提供功能接口。
比如有一些公共的东西，比如事务，日志，持久化这样的东西，就可以在代理对象中去
做。但是这样完全可以用继承去实现，为什么还要用动态代理呢？我考虑了一种场景。
A implements B,C,D,E，这个时候，你要继承A，岂不是很恶心吗？你可能只需要
接口C中的内容，所以这个时候用动态代理，因为我只需要C的功能比较适用一些。


Java反射知识-->Spring IoC :http://www.iteye.com/topic/1123081

今天和永城聊了一会技术关于宙斯里面的东西＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
1. 工厂模式，分为简单工厂和抽象工厂，什么时候用工厂呢？数据源
2. 单例模式，一般用在资源文件，一般实例化一次就OK

接下来需要看看设计模式在hadoop里面的运用

单例模式：
DelegationTokenRenewer.java
https://issues.apache.org/jira/browse/HADOOP-9049

Currently, DelegationTokenRenewer is not singleton.
Each filesystem using it spawns its own DelegationTokenRenewer.
A single DelegationTokenRenewer should be sufficient for all FileSystems.

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

public final class TwitterStreamFactory implements java.io.Serializable
 static {
        SINGLETON = new TwitterStreamImpl(ConfigurationContext.getInstance(), TwitterFactory.DEFAULT_AUTHORIZATION);
    }

工厂模式：
hadoop和spark里面关于日志模块都用了工厂模式去设计的
public abstract class LogFactory{}
 public static Log getLog(Class clazz) throws LogConfigurationException
        return getFactory().getInstance(clazz);

public final class TwitterStreamFactory implements java.io.Serializable
 static {
        SINGLETON = new TwitterStreamImpl(ConfigurationContext.getInstance(), TwitterFactory.DEFAULT_AUTHORIZATION);
    }

3. 宙斯之前有缓存系统，但是后面去除了，因为无法保持一致性问题，或者代价太大。因为job很多，不停的
写文件，需要不停的更新缓存，几乎每一分钟更新一次，这样太麻烦了，所以最后取消缓存了。直接去DBA里面
去读数据。
4. 如果是设计推荐系统的话，底层是Hbase的话，上层去查询的话，买了一个鼠标，接下来给他推荐一些东西，
这些东西就可以缓存起来，在Hbase上层加一个Redis缓存体系。
5. Master和Worker，作业的调度是最主要的，通信机制采用Netty实现RPC机制，RPC的底层实现采用
Socket和SocketServer进行通信。
6. 锁机制，如果Master结点半天没有反应,比如超过一段时间都没有反应，那么就进行unlock，如果采用
synchronized机制的话，你无法释放锁，所以采用lock机制，而不是采用synchronized机制来进行加锁
机制。当多个worker去争抢一个Master的时候，当其中一个Worker抢到了，要进行上锁，并向别的结点进
行宣布，我是Master了。

hello, 我是明磊，请教一个问题，你们的作业提交到一个Queue里面然后进行调度，这个作业是怎么描述的？一个Jar包？还是一个Bash脚本？
queue里面就是job id
job id? 根据job id找到这个job了？
对的，worker运行的时候会根据调度的jobid，获取脚本，生成bash脚本文件，执行
那这个脚本是在哪里的呢？别人提交的？放在你们的宙斯系统里面？
还有一个问题，这些作业放在一个queue里面，会不会因为一些比较急需调度的作业，一些牛逼的作业，长时间无法调度而饿死？
对的，脚本就保存在db表里面的某个字段
队列是个优先级队列，优先级高的会排在前面
还有一个异常队列，非优先级的，无法调度的job会丢到异常队列。

谈谈你对RPC的理解【分布式环境下RPC】？
1. RPC首先要解决的就是TCP的连接问题
  【一个 TCP 连接在完成上述的三次握手之后便建立完毕；此后，连接的两端即可进行信息的相互传递
    TCP 连接的这种特性，使得一个长期不交换任何信息的空闲连接可以长期保持数小时、数天甚至数月。
    中间路由器可以崩溃、重启，网线可以被挂断再连通，只要两端的主机没有被重启，TCP 连接就可以
    被一直保持下来】

    Host(A) --->(syn)---> Host(B)
    Host(B) --->(syn+ack)--->Host(A)
    Host(A) --->(ack)--->Host(B)
     --------ESTABLISHED--------

2. 其次解决寻址问题
3. 此外还有序列化框架的问题

NIO和传统IO（一下简称IO）之间第一个最大的区别是

＠１：IO是面向流的，NIO是面向缓冲区的
＠２：IO是同步操作，NIO是异步操作

NIO中的Channel的主要实现有：

FileChannel
DatagramChannel
SocketChannel
ServerSocketChannel
此外，基于transferTo还可以实现Zero-Copy问题





















